# -*- coding: utf-8 -*-
"""Extracting Spotify Audio Features.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zw8XJN3rGPd7nurbwjBPxD8aOjCJGxpO

# Before you start something, download [this file](https://drive.google.com/file/d/1qzY26uh4DkoXzUi9b0QftsHuhdFjjg58/view?usp=drive_link) and upload it here. copy the path and read it.

---

---

# Installing **spotipy**. Spotipy is a lightweight Python library for the Spotify Web API
"""

pip install spotipy

"""# Installing necessary libraries"""

import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import json
import pandas as pd

"""# Connecting to the **Spotify web API**"""

credentials = SpotifyClientCredentials(
    client_id='bf25aa9afab848d48d49607384aacad5',
    client_secret='0f9c80f3aa8346359ee9de10536b5404')

sp = spotipy.Spotify(client_credentials_manager=credentials)

"""# Loading the existing tracks into pandas dataframe. This dataframe only contains

*   track_id
*   Track_title
*   Artist




"""

tracks_df = pd.read_csv('/content/tracks.csv')

"""Current tail of the dataframe"""

tracks_df.tail()

"""# **Appending** tracks from **Album** into the dataframe"""

dd= sp.album_tracks('0aQEThOtiDPEq83aUDiNOt')

tt = pd.DataFrame(dd['items'])
aa = tt['artists']

id = tt['id']
artist = aa[0][0]['name']
title = tt['name']

for i in range(len(id)):

    data_to_append = {'Track_Title':title[i], 'Artist':artist,'Track_ID':id[i]}
    tmp = pd.DataFrame(data_to_append, index=[0])
    # Append data to the DataFrame
    tracks_df = pd.concat([tracks_df,tmp] , ignore_index=True)

"""# **Appending** tracks from **Playlist** into the dataframe"""

dd = sp.playlist('7H4p0CMz6XzqgLbFJVJ4FQ')

total_tracks = min(dd['tracks']['total'],99)

for i in range(total_tracks):
    print(i)
    id = dd['tracks']['items'][i]['track']['id']
    title = dd['tracks']['items'][i]['track']['name']
    artist = dd['tracks']['items'][i]['track']['artists'][0]['name']

    data_to_append = {'Track_Title':title, 'Artist':artist,'Track_ID':id}
    tmp = pd.DataFrame(data_to_append, index=[0])
    # Append data to the DataFrame
    tracks_df = pd.concat([tracks_df,tmp] , ignore_index=True)

"""# **Appending** **single tracks** into the dataframe"""

dd = sp.track('1g1iF9zlzJUpVDTUaCOpp1')

id = dd['id']
title = dd['name']
artist = dd['artists'][0]['name']

data_to_append = {'Track_Title':title, 'Artist':artist,'Track_ID':id}
tmp = pd.DataFrame(data_to_append, index=[0])
# Append data to the DataFrame
tracks_df = pd.concat([tracks_df,tmp] , ignore_index=True)

"""Tail after appending"""

print(tracks_df.tail(10))

"""# Extracting **audio features** from spotify using all the track_id"""

data = []
unique_id = set()

id_lis = list()
title_lis = list()
artist_lis = list()
for ind in tracks_df.index:

  id = tracks_df['Track_ID'][ind]
  title = tracks_df['Track_Title'][ind]
  artist = tracks_df['Artist'][ind]

  if id in unique_id:
    continue

  if len(id_lis) > 45:
    features = sp.audio_features(id_lis)
    pops = sp.tracks(id_lis)['tracks']

    for i in range(len(id_lis)):

        if features[i] is None:
            continue
        id = id_lis[i]
        title = title_lis[i]
        artist = artist_lis[i]

        pop = pops[i]['popularity']
        date = pops[i]['album'] ['release_date']
        date = date[:4]


        danceability = features[i]['danceability']
        energy = features[i]['energy']
        key = features[i]['key']
        loudness = features[i] ['loudness']
        mode = features[i] ['mode']

        speechiness = features[i] ['speechiness']
        acousticness = features[i] ['acousticness']
        instrumentalness = features[i] ['instrumentalness']
        liveness = features[i] ['liveness']
        valence = features[i] ['valence']

        tempo = features[i] ['tempo']
        duration = features[i] ['duration_ms'] / 1000
        time_signature = features[i] ['time_signature']

        data.append({ 'id':id,'title':title,'artist':artist, 'popularity': pop, 'year':date, 'danceability':danceability,
               'energy':energy, 'key':key, 'loudness':loudness, 'speechiness':speechiness,
               'acousticness':acousticness, 'instrumentalness':instrumentalness, 'liveness':liveness,
               'valence':valence, 'tempo':tempo, 'duration':duration, 'time_signature':time_signature })


    id_lis.clear()
    title_lis.clear()
    artist_lis.clear()

  id_lis.append(id)
  title_lis.append(title)
  artist_lis.append(artist)

  unique_id.add(id)
features = sp.audio_features(id_lis)
pops = sp.tracks(id_lis)['tracks']

for i in range(len(id_lis)):

    if features[i] is None:
        continue

    id = id_lis[i]
    title = title_lis[i]
    artist = artist_lis[i]

    pop = pops[i]['popularity']

    danceability = features[i]['danceability']
    energy = features[i]['energy']
    key = features[i]['key']
    loudness = features[i] ['loudness']
    mode = features[i] ['mode']

    speechiness = features[i] ['speechiness']
    acousticness = features[i] ['acousticness']
    instrumentalness = features[i] ['instrumentalness']
    liveness = features[i] ['liveness']
    valence = features[i] ['valence']

    tempo = features[i] ['tempo']
    duration = features[i] ['duration_ms'] / 1000
    time_signature = features[i] ['time_signature']

    data.append({ 'id':id,'title':title,'artist':artist, 'popularity': pop, 'year':date, 'danceability':danceability,
            'energy':energy, 'key':key, 'loudness':loudness, 'speechiness':speechiness,
            'acousticness':acousticness, 'instrumentalness':instrumentalness, 'liveness':liveness,
            'valence':valence, 'tempo':tempo, 'duration':duration, 'time_signature':time_signature })


print(len(unique_id))

print(len(data))

"""# Saving all the audio features into **data.csv** file. Updating **tracks.csv** file"""

df = pd.DataFrame(data)
df.to_csv('/content/data.csv', index=False)

tracks_df.to_csv('/content/tracks.csv', index=False)

"""# A file named *data.csv* is created. Click on the files icon and refresh it.
# Code ends here.
---



---



---

Junk Code
"""

lis = ['2kyRcNBnLfO3vR4TWAo45P','0UXswv8EK5264CWxS0tLNF','67RmLSjDk4AWMYUxn6J7R1']
aa = sp.tracks(lis)['tracks']

print(aa)
print(aa[0]['popularity'])

#print(aa['tracks'][0]['popularity'])

"""Junk code of Finding the **release year**."""

lis = ['2kyRcNBnLfO3vR4TWAo45P','0UXswv8EK5264CWxS0tLNF','67RmLSjDk4AWMYUxn6J7R1']
pops = sp.tracks(lis)['tracks']


dates = pops[0]['album'] ['release_date'] [:4]
print(dates)
dates = pops[1]['album'] ['release_date'] [:4]
print(dates)
dates = pops[2]['album'] ['release_date'] [:4]
print(dates)


for i in range(3):
    date = pops[i]['album'] ['release_date'] [:4]
    print(date)